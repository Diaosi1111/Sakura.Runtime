#include "gtest/gtest.h"
#include "wasm/api.h"

/*
#define WASM_EXPORT __attribute__((visibility("default")))

int WASM_EXPORT add(int a, int b) {
  return a + b;
}
*/
static const uint8_t add_wasm[] = {
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x01, 0x60,
    0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x05, 0x03, 0x01,
    0x00, 0x02, 0x06, 0x0e, 0x02, 0x7f, 0x00, 0x41, 0x80, 0x88, 0x04, 0x0b,
    0x7f, 0x00, 0x41, 0x80, 0x08, 0x0b, 0x07, 0x2b, 0x04, 0x06, 0x6d, 0x65,
    0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61,
    0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x00, 0x0a, 0x5f, 0x5f, 0x64,
    0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03, 0x01, 0x03, 0x61, 0x64,
    0x64, 0x00, 0x00, 0x0a, 0x09, 0x01, 0x07, 0x00, 0x20, 0x01, 0x20, 0x00,
    0x6a, 0x0b, 0x00, 0x64, 0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
    0x69, 0x6e, 0x66, 0x6f, 0x54, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x23, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x03, 0x50, 0x00, 0x00,
    0x00, 0x03, 0x64, 0x00, 0x00, 0x00, 0x01, 0x03, 0x50, 0x00, 0x00, 0x00,
    0x03, 0x66, 0x00, 0x00, 0x00, 0x01, 0x03, 0x50, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x60, 0x00, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x10, 0x0e, 0x2e,
    0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66,
    0x6f, 0x00, 0x00, 0x4f, 0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
    0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x01, 0x11, 0x01, 0x25, 0x0e, 0x13,
    0x05, 0x03, 0x0e, 0x10, 0x17, 0x1b, 0x0e, 0x11, 0x01, 0x12, 0x06, 0x00,
    0x00, 0x02, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x03, 0x0e, 0x3a, 0x0b,
    0x3b, 0x0b, 0x27, 0x19, 0x49, 0x13, 0x3f, 0x19, 0x00, 0x00, 0x03, 0x05,
    0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x00, 0x00, 0x04,
    0x24, 0x00, 0x03, 0x0e, 0x3e, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00,
    0x62, 0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e,
    0x65, 0x52, 0x00, 0x00, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x01,
    0x01, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x01, 0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x62, 0x75,
    0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x67, 0x34, 0x39, 0x75, 0x30, 0x70, 0x73,
    0x34, 0x61, 0x6e, 0x2e, 0x24, 0x00, 0x00, 0x66, 0x69, 0x6c, 0x65, 0x2e,
    0x63, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05, 0x00, 0x00,
    0x00, 0x14, 0x05, 0x0c, 0x0a, 0x21, 0x05, 0x03, 0x06, 0x58, 0x02, 0x01,
    0x00, 0x01, 0x01, 0x00, 0x73, 0x0a, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67,
    0x5f, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x76, 0x65,
    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x38, 0x2e, 0x30, 0x2e, 0x30, 0x20,
    0x28, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x20, 0x33, 0x34, 0x31, 0x39, 0x36,
    0x30, 0x29, 0x00, 0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x62, 0x75, 0x69, 0x6c,
    0x64, 0x5f, 0x6f, 0x67, 0x34, 0x39, 0x75, 0x30, 0x70, 0x73, 0x34, 0x61,
    0x6e, 0x2e, 0x24, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x63, 0x00, 0x2f,
    0x74, 0x6d, 0x70, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x67,
    0x34, 0x39, 0x75, 0x30, 0x70, 0x73, 0x34, 0x61, 0x6e, 0x2e, 0x24, 0x00,
    0x61, 0x64, 0x64, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x61, 0x00, 0x62, 0x00
};

class WASM3Test : public ::testing::Test
{
protected:
    void SetUp() override
    {
        SWAInstanceDescriptor inst_desc = { ESWA_BACKEND_WASM3 };
        instance = swa_create_instance(&inst_desc);
        EXPECT_NE(instance, nullptr);
        SWARuntimeDescriptor runtime_desc = { "wa_runtime", 64 * 1024 };
        runtime = swa_create_runtime(instance, &runtime_desc);
        EXPECT_NE(runtime, nullptr);
    }

    void TearDown() override
    {
        if (runtime) swa_free_runtime(runtime);
        if (instance) swa_free_instance(instance);
    }
    SWAInstanceId instance = nullptr;
    SWARuntimeId runtime = nullptr;
};

TEST_F(WASM3Test, LoadAndIncrement)
{
    SWAModuleDescriptor add_desc = {
        .name = "add",
        .wasm = add_wasm,
        .wasm_size = sizeof(add_wasm),
        .bytes_pinned_outside = true
    };
    SWAModuleId module = swa_create_module(runtime, &add_desc);
    EXPECT_NE(module, nullptr);
    SWAValue params[2];
    params[0].i = 12;
    params[1].i = 33;
    SWAValue ret;
    SWAExecDescriptor exec_desc = {
        2, params,
        1, &ret
    };
    auto res = swa_exec(runtime, "add", &exec_desc);
    EXPECT_EQ(res, nullptr);
    EXPECT_EQ(ret.i, 12 + 33);
}