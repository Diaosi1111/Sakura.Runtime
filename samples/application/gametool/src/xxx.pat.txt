#include <std/io.pat>
struct GUID {
        u32 time_low;
        u16 time_mid;
        u16 time_high_and_version;
        u8 clock_seq_and_reserved;
        u8 clock_seq_low;
        u8 node[6];
    } [[format("guid_formatter"), single_color]];

fn guid_formatter(GUID guid) {
        bool valid = ((le u16(guid.time_high_and_version) >> 12) <= 5) && (((guid.clock_seq_and_reserved >> 4) >= 8) || ((guid.clock_seq_and_reserved >> 4) == 0));

        return std::format("{}{{{:08X}-{:04X}-{:04X}-{:02X}{:02X}-{:02X}{:02X}{:02X}{:02X}{:02X}{:02X}}}",
            valid ? "" : "Invalid ",
            le u32(guid.time_low),
            le u16(guid.time_mid),
            le u16(guid.time_high_and_version),
            guid.clock_seq_and_reserved,
            guid.clock_seq_low,
            guid.node[0],
            guid.node[1],
            guid.node[2],
            guid.node[3],
            guid.node[4],
            guid.node[5]);
    };

struct resource_header
{
	u32 headerVersion;
	u32 Version;
	GUID resourceId;
	GUID resourceType;
	u8 dependencyCount;
};

struct typeset
{
	u16 length;
	GUID types[length];
};

struct metaset
{
	u16 length;
	u32 ents[length];
};

struct entitytype
{
	typeset type;
	metaset meta;
};

struct children
{
	s32 pad;
	s32 length;
	u32 childs[length/4];
};

struct float4x4
{
	float value[16];
};

struct name
{
	char value[32];
};

struct chunk1
{
	u32 count;
	u32 ents[count];
	name cname[count];
	float4x4 ctransform[count];
	children cchild[count];
};

struct group1
{
	entitytype type;
	u16 chunkCount;
	chunk1 chunks[chunkCount];
};

struct chunk2
{
	u32 count;
	u32 ents[count];
	u32 cparent[count];
	name cname[count];
	float4x4 ctransform[count];
};

struct group2
{
	entitytype type;
	u16 chunkCount;
	chunk2 chunks[chunkCount];
};


struct chunk3
{
	u32 count;
	u32 ents[count];
	u32 cparent[count];
	name cname[count];
	float4x4 ctransform[count];
	children cchild[count];
};

struct group3
{
	entitytype type;
	u16 chunkCount;
	chunk3 chunks[chunkCount];
};


struct world
{
	u32 entrySize;
	u32 freeEntrySize;
	u32 freeEntries[freeEntrySize];
	u32 groupCount;
	group1 g1;
	group3 g3;
};

struct scene_file
{
	resource_header header;
	world scene;
};

scene_file file @ 0x0;